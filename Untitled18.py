{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/d1m3j1/Dimeji-DSCI/blob/dsbranch/Untitled18.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oVjKKR7H_Qo5",
        "outputId": "07f62cb2-02c6-4f69-8fa1-bdd467faf25d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "File Successfully Saved.!!!\n"
          ]
        }
      ],
      "source": [
        "import json\n",
        "import pandas as pd\n",
        "from textblob import TextBlob\n",
        "\n",
        "def read_json(json_file: str)->list:\n",
        "    \"\"\"\n",
        "    json file reader to open and read json files into a list\n",
        "    Args:\n",
        "    -----\n",
        "    json_file: str - path of a json file\n",
        "    \n",
        "    Returns\n",
        "    -------\n",
        "    length of the json file and a list of json\n",
        "    \"\"\"\n",
        "    \n",
        "    tweets_data = []\n",
        "    for tweets in open(json_file,'r'):\n",
        "        tweets_data.append(json.loads(tweets))\n",
        "     \n",
        "    return len(tweets_data), tweets_data\n",
        "\n",
        "class TweetDfExtractor:\n",
        "    \"\"\"\n",
        "    this function will parse tweets json into a pandas dataframe\n",
        "    \n",
        "    Return\n",
        "    ------\n",
        "    dataframe\n",
        "    \"\"\"\n",
        "    def __init__(self, tweets_list):    \n",
        "        self.tweets_list = tweets_list\n",
        "\n",
        "    def find_statuses_count(self)->list:\n",
        "        statuses_count = []\n",
        "        for i in self.tweets_list:\n",
        "            statuses_count.append(i.get('user').get('statuses_count'))\n",
        "        return statuses_count     \n",
        "\n",
        "    def find_full_text(self)->list:\n",
        "        text = []\n",
        "        for i in self.tweets_list:\n",
        "            try: \n",
        "                text.append(i['retweeted_status']['extended_tweet']['full_text'])\n",
        "            except KeyError:\n",
        "                text.append(i['text'])\n",
        "        return text\n",
        "    \n",
        "    def find_sentiments(self, text)->list:\n",
        "        polarity = []\n",
        "        subjectivity = []\n",
        "        for i in text:\n",
        "            blob = TextBlob(i)\n",
        "            sentiment = blob.sentiment\n",
        "            polarity.append(sentiment.polarity)\n",
        "            subjectivity.append(sentiment.subjectivity)\n",
        "        return polarity, subjectivity\n",
        "\n",
        "    def find_created_time(self)->list:\n",
        "        created_at = []\n",
        "        for i in self.tweets_list:\n",
        "            created_at.append(i.get('created_at', None))\n",
        "        return created_at\n",
        "\n",
        "    def find_source(self)->list:\n",
        "        source = []\n",
        "        for i in self.tweets_list:\n",
        "          source.append(i.get('source', None))\n",
        "\n",
        "        return source\n",
        "\n",
        "    def find_screen_name(self)->list:\n",
        "        screen_name = []\n",
        "        for i in self.tweets_list:\n",
        "          screen_name.append(i.get('user', {}).get('screen_name', None))\n",
        "        return screen_name\n",
        "\n",
        "    def find_followers_count(self)->list:\n",
        "        followers_count = []\n",
        "        for i in self.tweets_list:\n",
        "          followers_count.append(i.get('user', {}).get('followers_count', 0))\n",
        "        return followers_count\n",
        "\n",
        "    def find_friends_count(self)->list:\n",
        "            friends_count = []\n",
        "            for i in self.tweets_list:\n",
        "                friends_count.append(i.get('user', {}).get('friends_count', 0))\n",
        "            return friends_count\n",
        "  \n",
        "    def is_sensitive(self)->list:\n",
        "        try:\n",
        "            is_sensitive = [i['retweeted_status']['possibly_sensitive'] for i in self.tweets_list]\n",
        "        except KeyError:\n",
        "            is_sensitive = [None for i in self.tweets_list]\n",
        "\n",
        "        return is_sensitive\n",
        "\n",
        "    def find_favourite_count(self)->list:\n",
        "        favourite_count = [i.get('retweeted_status', {}).get('favorite_count', 0) for i in self.tweets_list]\n",
        "        return favourite_count\n",
        "    \n",
        "    def find_retweet_count(self)->list:\n",
        "        retweet_count = [i.get('retweeted_status', {}).get('retweet_count', None) for i in self.tweets_list]\n",
        "        return retweet_count\n",
        "\n",
        "    def find_hashtags(self)->list:\n",
        "        all_hashtags =[i.get('entities', {}).get('hashtags', None) for i in self.tweets_list]\n",
        "        hash_tags = []\n",
        "        for hashs in all_hashtags:\n",
        "            if (hashs):\n",
        "                cur_hashtags = []\n",
        "                for hashs_obj in hashs:\n",
        "                    try:\n",
        "                        cur_hashtags.append(hashs_obj['text'])\n",
        "                    except KeyError:\n",
        "                        pass\n",
        "                hash_tags.append(\" \".join(cur_hashtags))\n",
        "            else:\n",
        "                hash_tags.append(None)\n",
        "\n",
        "        return hash_tags\n",
        "\n",
        "    def find_mentions(self)->list:\n",
        "        all_mentions = [i.get('entities', {}).get('user_mentions', None) for i in self.tweets_list]\n",
        "        mentions = []\n",
        "        for mention_list_obj in all_mentions:\n",
        "            if (mention_list_obj):\n",
        "                cur_mentions = []\n",
        "                for mention_obj in mention_list_obj:\n",
        "                    try:\n",
        "                        cur_mentions.append(mention_obj['screen_name'])\n",
        "                    except KeyError:\n",
        "                        pass\n",
        "                mentions.append(\" \".join(cur_mentions))\n",
        "            else:\n",
        "                mentions.append(None)\n",
        "        return mentions\n",
        "\n",
        "    def find_location(self)->list:\n",
        "        location = []\n",
        "        for i in self.tweets_list:\n",
        "            location.append(i.get('user', {}).get('location', None))\n",
        "        return location\n",
        "\n",
        "    def find_lang(self)->list:\n",
        "        lang = [i.get('lang', None) for i in self.tweets_list]\n",
        "        return lang\n",
        "\n",
        "    \n",
        "        \n",
        "        \n",
        "    def get_tweet_df(self, save=False)->pd.DataFrame:\n",
        "        \"\"\"required column to be generated you should be creative and add more features\"\"\"\n",
        "        \n",
        "        columns = ['created_at', 'source', 'original_text','polarity','subjectivity', 'lang', 'favorite_count', 'retweet_count', \n",
        "            'screen_name', 'followers_count','friends_count','sensitivity', 'hashtags', 'user_mentions', 'place']\n",
        "        \n",
        "\n",
        "        created_at = self.find_created_time()\n",
        "        source = self.find_source()\n",
        "        text = self.find_full_text()\n",
        "        polarity, subjectivity = self.find_sentiments(text)\n",
        "        lang = self.find_lang()\n",
        "        fav_count = self.find_favourite_count()\n",
        "        retweet_count = self.find_retweet_count()\n",
        "        screen_name = self.find_screen_name()\n",
        "        follower_count = self.find_followers_count()\n",
        "        friends_count = self.find_friends_count()\n",
        "        sensitivity = self.is_sensitive()\n",
        "        hashtags = self.find_hashtags()\n",
        "        mentions = self.find_mentions()\n",
        "        location = self.find_location()\n",
        "        data = zip(created_at, source, text, polarity, subjectivity, \\\n",
        "                lang, fav_count, retweet_count, screen_name, follower_count, \\\n",
        "                friends_count, sensitivity, hashtags, mentions, location)\n",
        "        df = pd.DataFrame(data=data, columns=columns)\n",
        "\n",
        "        if save:\n",
        "            df.to_csv('processed_tweet_data.csv', index=False)\n",
        "        print('File Successfully Saved.!!!')\n",
        "        \n",
        "        return df\n",
        "\n",
        "                \n",
        "if __name__ == \"__main__\":\n",
        "    # required column to be generated you should be creative and add more features\n",
        "    columns = ['statuses_count', 'created_at', 'source', 'original_text', 'sentiment','polarity','subjectivity', 'lang', 'favorite_count', 'retweet_count', \n",
        "     'screen_name','followers_count','friends_count','sensitivity', 'hashtags', 'user_mentions', 'place']\n",
        "    # _, tweet_list = read_json(\"../Economic_Twitter_Data.json\")\n",
        "    _, tweet_list = read_json(\"/content/Economic_Twitter_Data.json\")\n",
        "    tweet = TweetDfExtractor(tweet_list)\n",
        "    tweet_df = tweet.get_tweet_df() \n",
        "\n",
        "    # use all defined functions to generate a dataframe with the specified columns above\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [],
      "name": "Untitled18.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyNYN7l8qxa8yUHuEAVWsVcz",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}